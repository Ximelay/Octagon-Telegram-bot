// Node.js, ORM Sequalize (MySQL), библиотека "node-telegram-bot-api", библиотека express

// 3*) Кнопка Посмотреть заявки *Требуется роль администратора для показа данного меню и самой кнопки*
// 3.1) Отображаем список заявок
// 3.1.1) Заявки можно выбрать кнопками. Кнопки содержат в себе лишь ID заявок
// 3.1.1.1) После выбора заявки, мы пишем боту любой текст/отправляем любые файлы. Бот должен прислать это сообщение пользователю заявки (пересылать сообщение от администратора - запрещено)
// 3.1.2) Должен быть следующий вид: id - текст
// 3.1.3) Текст должен быть по длине не более 32 символов (первые 32 символа сообщения пользователя)


// *) На каждом этапе пагинации - должна быть кнопка назад
// *) При нажатии любой кнопки, должна быть динамическая кнопка отмены запроса во время выполнения
// *) В БД должен быть список пользователей с ролями. По умолчанию роль == 0 (Юзер). Роли могут быть 2: Юзер и Администратор


// С реализацией пагинации (кнопки назад) поможет данная статья:
// https://habr.com/ru/articles/740796/

// А именно глава "Обработка и отправка текстового сообщения"

// Суть в том, что когда бот отправляет сообщение, вы ему показываете сообщение о транзакции и показываете кнопку отмены, эту кнопку вам нужно перехватить и если человек успеет это сделать - отменить обработку (или отменить вывод, если это произошло быстрее)

// перехватить = нажать

// Вот структура проекта:
// octagon-bot/
// ├── config/
// │   └── db.config.js        # Настройки базы данных
// ├── controllers/
// │   ├── faq.controller.js    # Контроллер для обработки запросов FAQ
// │   ├── feedback.controller.js # Контроллер для обработки обратной связи
// │   └── admin.controller.js  # Контроллер для заявок и управления администратором
// ├── models/
// │   ├── user.model.js        # Модель пользователя
// │   ├── faq.model.js         # Модель вопросов FAQ
// │   ├── feedback.model.js    # Модель обратной связи
// │   ├── task.model.js        # Модель заявок (tasks)
// │   └── index.js             # Экспорт всех моделей
// ├── routes/
// │   └── bot.routes.js        # Основной файл с логикой обработки запросов ботом
// ├── services/
// │   ├── bot.service.js       # Логика для взаимодействия с ботом
// │   └── faq.service.js       # Логика для работы с базой данных FAQ

// ├── bot.js                   # Точка входа в приложение, запуск бота
// ├── package.json             # Список зависимостей
// └── database.sql             # SQL-запросы для создания таблиц

